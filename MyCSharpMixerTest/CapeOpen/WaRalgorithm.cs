// 大白萝卜重构于 2025.05.14，使用 .NET8.O-windows、Microsoft Visual Studio 2022 Preview 和 Rider 2024.3。

using System.Data;

namespace CapeOpen;

/// <summary>
/// Performs US EPA Waste Reduction (WAR) algorithm calculation on a flowsheet accessed using the 
/// <see cref="ICapeFlowsheetMonitoring"/> interface.
/// </summary>
/// <remarks>
/// <para>
/// The WAR plug-in works by directly access the unit operations and material flows within the flowsheet. 
/// Once the WAR plug-in has been instantiated by the flowsheeting environment, in this case, COFE, the WAR 
/// plug-in is initialized and provided with a reference to the flowsheet monitoring interface enabling the 
/// plug-in to directly access the flowsheet’s unit operation and stream collections. The flowsheet 
/// monitoring interface is one of the features of the simulation context provided by COFE to the WAR 
/// plug-in.</para>
/// <para>
/// Upon activation, the WAR plug-in enumerates all of the unit operations and streams contained within the 
/// flowsheet using the flowsheet monitoring interface. First, the plug-in places references to the streams 
/// in two stream collections, separate input and output stream collections. The unit operations in the unit
/// operation collection are queried for inlet and outlet ports. The streams connected to these ports are 
/// matched against the streams in the input and/or output stream collections. Streams that are attached to 
/// input ports for a unit operation are then removed from the output stream collections as the no longer 
/// leave the process. Likewise, streams that are attached to an outlet port are removed from the input 
/// stream collection as they originate within the process. That is, streams not connected to any unit 
/// operation outlet port are considered feed streams, and streams that are not connected to any unit
/// operation inlet port are considered output streams. An exception to this rule is that some PMEs utilize 
/// “source” unit operations that only have a single outlet stream and no inlet streams. These units are 
/// considered to be feed units, and the stream connected to it is considered to be a feed stream. 
/// Analogously, unit operations that have only a single inlet port and no outlet ports are considered to 
/// be product units; the streams connected to it are considered to be product streams.
/// </para>
/// <para>This plug-in also allows users to select only portions of the flowsheet for a WAR analysis. This 
/// is accomplished by having the user select the unit operations of interest. The feed and product stream 
/// algorithms for a sub-set of the total unit operation collection are similar to the algorithm described 
/// above for the total flowsheet. 
/// </para>
/// <para>Once the feed and product streams have been identified, the plug-in performs its WAR calculation. 
/// The specific PEI, ψ<sub>(k,i)</sub><sup>S</sup>, for each chemical is calculated by averaging the impact category scores 
/// for all the chemicals in the database and normalizing by dividing the chemical’s score by the average 
/// value. Once the normalized ψ<sub>(k,i)</sub><sup>S</sup> has been calculated, the PEI generated by the 
/// process, İ<sub>gen</sub>, is calculated using the normalized value of ψ<sub>(k,i)</sub><sup>S</sup> for 
/// the individual categories, category weighting factor mass flow rates and the concentration of the 
/// chemical of each stream. The plug-in allows the user to designate product streams and account for 
/// energy usage in the WAR algorithm.
/// </para>
/// </remarks>
[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
public partial class WaRalgorithm : Form
{
    private readonly DataTable _warData;
    private readonly DataTable _compounds;
    private readonly DataTable _streams;
    private readonly ICapeFlowsheetMonitoring _pMonitoring;
    private readonly List<ICapeUnitCOM> _pUnits;
    private readonly List<ICapeIdentification> _pStreams;
    private readonly List<ICapeIdentification> _pInletStreams;
    private readonly List<ICapeIdentification> _pOutletStreams;
    private double[] _avgCatScore;
    private double _energy;

    private StreamReader _streamToPrint;
    private Font _printFont;
    private readonly System.Collections.ArrayList _productStreams;
    private readonly string _sheetName;
    private readonly string _sheetDescription;
    private double _productFlow;
    private double _iEnergyTime;
    private double _iEnergyMass;
    private double _iOutTime;
    private double _iOutMass;
    private double _iGenTime;
    private double _iGenMass;
    private double[] _peiOutTime;
    private double[] _peiLeaveMass;
    private double[] _peiGenTime;
    private double[] _peiGenMass;
    private double[] _peiEnergyTime;
    private readonly bool _starting;

    /// <summary>
    /// Creates a new instance of the <see cref="WaRalgorithm"/> class.
    /// </summary>
    /// <param name="warDataTable"> <see cref="DataTable"/>containing chemical data used in the WAR Algorithm Calculation.</param>
    /// <param name="monitoring">An <see cref="ICapeFlowsheetMonitoring"/> reference to the current flowsheet in the process modeling 
    /// environment (PME).</param>
    public WaRalgorithm(DataTable warDataTable, ICapeFlowsheetMonitoring monitoring)
    {
        try
        {
            InitializeComponent();
            if (monitoring.ValStatus != CapeValidationStatus.CAPE_VALID)
            {
                MessageBox.Show("The flow sheet is not valid. The WAR outputs may not be correct.");
                //			throw gcnew CapeOpen.CapeInvalidOperationException("The flow sheet is not valid. Please check the status of the flowsheet and retry.");
            }

            if (monitoring.SolutionStatus != CapeSolutionStatus.CAPE_SOLVED)
            {
                MessageBox.Show("The flow sheet has not been solved. The WAR outputs may not be correct.");
                //			throw gcnew CapeOpen.CapeInvalidOperationException("The flow sheet is not valid. Please check the status of the flowsheet and retry.");
            }

            var sheetId = (ICapeIdentification)monitoring;
            _sheetName = sheetId.ComponentName;
            _sheetDescription = sheetId.ComponentDescription;
            _warData = warDataTable;
            _energy = 0;
            _productStreams = new System.Collections.ArrayList();
            _compounds = new DataTable();
            _streams = new DataTable();
            _compounds.Columns.Add("Compound Name", typeof(string));
            _compounds.Columns.Add("CAS Number", typeof(string));
            _compounds.Columns.Add("Chemical Formula", typeof(string));
            _compounds.Columns.Add("Structural Formula", typeof(string));
            _compounds.Columns.Add("Molecular Weight", typeof(double));
            _compounds.Columns.Add("Human Ingestion Impact", typeof(double));
            _compounds.Columns.Add("Human Dermal Impact", typeof(double));
            _compounds.Columns.Add("Aquatic Toxicity Impact", typeof(double));
            _compounds.Columns.Add("Terrestrial Toxicity Impact", typeof(double));
            _compounds.Columns.Add("Global Warming Impact", typeof(double));
            _compounds.Columns.Add("Ozone Impact", typeof(double));
            _compounds.Columns.Add("Photochemical Oxidation Impact", typeof(double));
            _compounds.Columns.Add("Acidification Impact", typeof(double));
            _streams.Columns.Add("Stream Name", typeof(string));
            _streams.Columns.Add("Type", typeof(string));
            _streams.Columns.Add("Total Flow", typeof(double));
            _streams.Columns.Add("I Dot", typeof(double));
            _streams.Columns.Add("I Hat", typeof(double));
            _streams.Columns.Add("Human Ingestion", typeof(double));
            _streams.Columns.Add("Human Dermal", typeof(double));
            _streams.Columns.Add("Aquatic Toxicity", typeof(double));
            _streams.Columns.Add("Terrestrial Toxicity", typeof(double));
            _streams.Columns.Add("Global Warming", typeof(double));
            _streams.Columns.Add("Ozone", typeof(double));
            _streams.Columns.Add("Photochemical Oxidation", typeof(double));
            _streams.Columns.Add("Acidification", typeof(double));
            _pMonitoring = monitoring;
            _pUnits = [];
            _pStreams = [];
            _pInletStreams = [];
            _pOutletStreams = [];
            _starting = true;
            ResetStreams();
            UpdateStreams();
            WarCalculation();
            _starting = false;
        }
        catch (Exception pEx)
        {
            MessageBox.Show(pEx.Message);
        }
    }

    private void saveToolStripMenuItem_Click(object sender, EventArgs e)
    {
        var saveFileDialog1 = new SaveFileDialog();
        saveFileDialog1.Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*";
        saveFileDialog1.FilterIndex = 1;
        saveFileDialog1.RestoreDirectory = true;
        if (saveFileDialog1.ShowDialog() != DialogResult.OK) return;
        Stream myStream;
        if ((myStream = saveFileDialog1.OpenFile()) == null) return;
        var writer = new StreamWriter(myStream);
        writer.Write(textBox1.Text);
        writer.Flush();
        writer.Close();
        myStream.Close();
    }

    private void printToolStripMenuItem_Click(object sender, EventArgs e)
    {
        try
        {
            printDialog1.AllowSomePages = false;
            _printFont = new Font("Courier New", 10);
            var myStream = new MemoryStream();
            var writer = new StreamWriter(myStream);
            writer.Write(textBox1.Text);
            writer.Flush();
            writer.BaseStream.Position = 0;
            _streamToPrint = new StreamReader(myStream);
            printDocument1.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(100, 100, 50, 50);
            printDocument1.DefaultPageSettings.Landscape = true;
            printDocument1.Print();
            writer.Close();
        }
        catch (Exception pEx)
        {
            MessageBox.Show(pEx.Message);
        }
    }


    private void exitToolStripMenuItem_Click(object sender, EventArgs e)
    {
        Close();
    }

    private void considerEnergyFlowsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        WarCalculation();
    }

    private void energyTypeComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        WarCalculation();
    }

    private void includeProductStreamsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        WarCalculation();
    }

    private void ClearStreamArrays()
    {
        try
        {
            //  p_Streams.Clear();
            _pInletStreams.Clear();
            _pOutletStreams.Clear();
        }
        catch (Exception pEx)
        {
            MessageBox.Show(pEx.Message);
        }
    }

    private void ClearUnitArrays()
    {
        try
        {
            _pUnits.Clear();
        }
        catch (Exception pEx)
        {
            MessageBox.Show(pEx.Message);
        }
    }

    private void UpdateStreams()
    {
        _compounds.Rows.Clear();
        _energy = 0;
        foreach (var pStream in _pInletStreams)
        {
            switch (pStream)
            {
                case ICapeThermoMaterialObjectCOM thermoMaterialObjectCom:
                {
                    var comps = (string[])(thermoMaterialObjectCom.ComponentIds);
                    var propNames = new string[1];
                    propNames[0] = "casRegistryNumber";
                    var casNos = (object[])thermoMaterialObjectCom.GetComponentConstant(propNames, comps);
                    propNames[0] = "chemicalFormula";
                    var chemForms = (object[])thermoMaterialObjectCom.GetComponentConstant(propNames, comps);
                    propNames[0] = "structureFormula";
                    var structForms = (object[])thermoMaterialObjectCom.GetComponentConstant(propNames, comps);
                    propNames[0] = "molecularWeight";
                    var molWts = (object[])thermoMaterialObjectCom.GetComponentConstant(propNames, comps);
                    var inletFlow = (double[])thermoMaterialObjectCom.GetProp("flow", "overall", comps, null, "mass");
                    for (var i = 0; i < comps.Length; i++)
                    {
                        var needsAdded = true;
                        foreach (DataRow row in _compounds.Rows)
                        {
                            if (comps[i] == row["Compound Name"].ToString())
                            {
                                needsAdded = false;
                            }
                        }

                        if (!needsAdded) continue;
                        var newRow = _compounds.NewRow();
                        _compounds.Rows.Add(newRow);
                        newRow["Compound Name"] = comps[i];
                        newRow["CAS Number"] = casNos[i].ToString();
                        newRow["Chemical Formula"] = chemForms[i].ToString();
                        newRow["Structural Formula"] = structForms[i].ToString();
                        newRow["Molecular Weight"] = Convert.ToDouble(molWts[i]);
                        if (!_streams.Columns.Contains(comps[i])) _streams.Columns.Add(comps[i]);
                    }

                    break;
                }
                case ICapeCollection mStream:
                {
                    var pColl = mStream;
                    var pParam = (ICapeParameter)pColl.Item("work");
                    var energyFlow = Convert.ToDouble(pParam.value);
                    _energy = _energy - energyFlow * 3600 / 1000000;
                    break;
                }
            }
        }

        foreach (var pStream in _pOutletStreams)
        {
            switch (pStream)
            {
                case ICapeThermoMaterialObjectCOM thermoMaterialObjectCom:
                {
                    var comps = (string[])thermoMaterialObjectCom.ComponentIds;
                    var propNames = new string[1];
                    propNames[0] = "casRegistryNumber";
                    var casNos = (object[])thermoMaterialObjectCom.GetComponentConstant(propNames, comps);
                    propNames[0] = "chemicalFormula";
                    var chemForms = (object[])thermoMaterialObjectCom.GetComponentConstant(propNames, comps);
                    propNames[0] = "structureFormula";
                    var structForms = (object[])thermoMaterialObjectCom.GetComponentConstant(propNames, comps);
                    propNames[0] = "molecularWeight";
                    var molWts = (object[])thermoMaterialObjectCom.GetComponentConstant(propNames, comps);
                    var inletFlow = (double[])thermoMaterialObjectCom.GetProp("flow", "overall", comps, null, "mass");
                    for (var i = 0; i < comps.Length; i++)
                    {
                        var needsAdded = true;
                        foreach (DataRow row in _compounds.Rows)
                        {
                            if (comps[i] == row["Compound Name"].ToString())
                            {
                                needsAdded = false;
                            }
                        }

                        if (!needsAdded) continue;
                        var newRow = _compounds.NewRow();
                        _compounds.Rows.Add(newRow);
                        newRow["Compound Name"] = comps[i];
                        newRow["CAS Number"] = casNos[i].ToString();
                        newRow["Chemical Formula"] = chemForms[i].ToString();
                        newRow["Structural Formula"] = structForms[i].ToString();
                        newRow["Molecular Weight"] = Convert.ToDouble(molWts[i]);
                        if (!_streams.Columns.Contains(comps[i])) _streams.Columns.Add(comps[i]);
                    }

                    break;
                }
                case ICapeCollection kStream:
                {
                    var pColl = kStream;
                    var pParam = (ICapeParameter)pColl.Item("work");
                    var energyFlow = Convert.ToDouble(pParam.value);
                    _energy = _energy + energyFlow * 3600 / 1000000;
                    break;
                }
            }
        }
    }

    private void ResetStreams()
    {
        label5.Text = "";
        ClearStreamArrays();
        ClearUnitArrays();
        var pUnitColl = (ICapeCollection)_pMonitoring.GetUnitOperationCollection();
        var pStreamColl = (ICapeCollection)_pMonitoring.GetStreamCollection();
        //
        // Tab Page 2 - Unit Operations...
        //
        for (var i = 0; i < pStreamColl.Count(); i++)
        {
            if (pStreamColl.Item(i + 1) is not ICapeIdentification) continue;
            var pStream = (ICapeIdentification)pStreamColl.Item(i + 1);
            _pStreams.Add(pStream);
            _pInletStreams.Add(pStream);
            _pOutletStreams.Add(pStream);
        }

        for (var i = 0; i < pUnitColl.Count(); i++)
        {
            var pUnit = (ICapeUnitCOM)pUnitColl.Item(i + 1);
            var unitName = ((ICapeIdentification)pUnit).ComponentName;
            var pUnitPortColl = (ICapeCollection)pUnit.ports;
            if (pUnitPortColl.Count() > 1)
            {
                _pUnits.Add(pUnit);
                for (var j = 0; j < pUnitPortColl.Count(); j++)
                {
                    var pPort = (ICapeUnitPortCOM)pUnitPortColl.Item(j + 1);
                    if (pPort.connectedObject != null)
                    {
                        var pId = (ICapeIdentification)pPort.connectedObject;
                        var streamName = pId.ComponentName;
                        switch (pPort.direction)
                        {
                            case CapePortDirection.CAPE_INLET:
                            {
                                var objectToRemove = 0;
                                for (var k = 0; k < _pOutletStreams.Count; k++)
                                {
                                    var currStream = _pOutletStreams[k].ComponentName;
                                    if (currStream == streamName)
                                    {
                                        objectToRemove = k;
                                    }
                                }

                                _pOutletStreams.RemoveAt(objectToRemove);
                                break;
                            }
                            case CapePortDirection.CAPE_OUTLET:
                            {
                                var objectToRemove = 0;
                                for (var k = 0; k < _pInletStreams.Count; k++)
                                {
                                    if (_pInletStreams[k].ComponentName == streamName)
                                    {
                                        objectToRemove = k;
                                    }
                                }

                                _pInletStreams.RemoveAt(objectToRemove);
                                break;
                            }
                            case CapePortDirection.CAPE_INLET_OUTLET:
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    }
                    else
                    {
                        if (pPort.portType == CapePortType.CAPE_ENERGY)
                            label5.Text = "NOTE: Not all energy Ports are connected.";
                    }
                }
            }

            AvailableUnitOpsheckedListBox.Items.Add(((ICapeIdentification)(pUnitColl.Item(i + 1))).ComponentName,
                true);
        }

        foreach (var pId in _pInletStreams)
        {
            if (pId is ICapeThermoMaterialObjectCOM)
            {
                feedAndInletStreamListBox.Items.Add(pId.ComponentName);
            }
        }

        foreach (var pId1 in _pOutletStreams)
        {
            if (pId1 is ICapeThermoMaterialObjectCOM pMo)
            {
                checkedListBox1.Items.Add(pId1.ComponentName, false);
            }
        }
    }

    private void WarCalculation()
    {
        CalcAvgScores();
        CalcImpactScores();
        CalcCaseImpacts();
        OverallImpactCalculations();
        WriteResultsFile();
    }

    private void CalcAvgScores()
    {
        // indicator = Category_Value

        var sumScores = new double[7];
        var numRecords = new int[7];

        for (var i = 0; i < 7; i++)
        {
            sumScores[i] = 0;
            numRecords[i] = 0;
        }

        foreach (DataRow data in _warData.Rows)
        {
            if (data["Rat LD50"].GetType() != typeof(DBNull))
            {
                var value = Convert.ToDouble(data["Rat LD50"]);
                // RAT ORAL LD50 (omitting cyanogen chloride)
                if (value > 2.6)
                {
                    sumScores[0] = sumScores[0] + 1 / value;
                    numRecords[0]++;
                }
            }

            if (data["OSHA PEL"].GetType() != typeof(DBNull))
            {
                var value = Convert.ToDouble(data["OSHA PEL"]);
                // OSHA TWA (omitting artificially inflated carcinogens
                if (value > 0.00005)
                {
                    sumScores[1] = sumScores[1] + 1 / value;
                    numRecords[1]++;
                }
            }

            if (data["Fathead LC50"].GetType() != typeof(DBNull))
            {
                sumScores[2] = sumScores[2] + 1 / Convert.ToDouble(data["Fathead LC50"]);
                numRecords[2]++;
            }

            if (data["Global Warming Potential"].GetType() != typeof(DBNull))
            {
                sumScores[3] = sumScores[3] + Convert.ToDouble(data["Global Warming Potential"]);
                numRecords[3]++;
            }

            if (data["Ozone Depletion Potential"].GetType() != typeof(DBNull))
            {
                sumScores[4] = sumScores[4] + Convert.ToDouble(data["Ozone Depletion Potential"]);
                numRecords[4]++;
            }

            if (data["Photochemical Oxidation Potential"].GetType() != typeof(DBNull))
            {
                sumScores[5] = sumScores[5] + Convert.ToDouble(data["Photochemical Oxidation Potential"]);
                numRecords[5]++;
            }

            if (data["Acidification Potential"].GetType() == typeof(DBNull)) continue;
            sumScores[6] = sumScores[6] + Convert.ToDouble(data["Acidification Potential"]);
            numRecords[6]++;
        }

        _avgCatScore = new double[7];
        for (var i = 0; i < 7; i++)
        {
            _avgCatScore[i] = sumScores[i] / numRecords[i];
        }
    }

    private void CalcImpactScores()
    {
        foreach (DataRow compoundRow in _compounds.Rows)
        {
            compoundRow["Human Ingestion Impact"] = 0.0;
            compoundRow["Terrestrial Toxicity Impact"] = 0.0;
            compoundRow["Human Dermal Impact"] = 0.0;
            compoundRow["Aquatic Toxicity Impact"] = 0.0;
            compoundRow["Terrestrial Toxicity Impact"] = 0.0;
            compoundRow["Global Warming Impact"] = 0.0;
            compoundRow["Ozone Impact"] = 0.0;
            compoundRow["Photochemical Oxidation Impact"] = 0.0;
            compoundRow["Acidification Impact"] = 0.0;
            foreach (DataRow warRow in _warData.Rows)
            {
                if (warRow["CAS"].ToString() == compoundRow["CAS Number"].ToString())
                {
                    if (warRow["Rat LD50"].GetType() != typeof(DBNull))
                    {
                        var value = Convert.ToDouble(warRow["Rat LD50"]);
                        compoundRow["Human Ingestion Impact"] = 1 / value / _avgCatScore[0];
                        compoundRow["Terrestrial Toxicity Impact"] = 1 / value / _avgCatScore[0];
                    }

                    if (warRow["OSHA PEL"].GetType() != typeof(DBNull))
                    {
                        var value = Convert.ToDouble(warRow["OSHA PEL"]);
                        // OSHA TWA (omitting artificially inflated carcinogens
                        compoundRow["Human Dermal Impact"] = 1 / value / _avgCatScore[1];
                    }

                    if (warRow["Fathead LC50"].GetType() != typeof(DBNull))
                    {
                        compoundRow["Aquatic Toxicity Impact"] =
                            1 / Convert.ToDouble(warRow["Fathead LC50"]) / _avgCatScore[2];
                    }

                    if (warRow["Global Warming Potential"].GetType() != typeof(DBNull))
                    {
                        compoundRow["Global Warming Impact"] =
                            Convert.ToDouble(warRow["Global Warming Potential"]) / _avgCatScore[3];
                    }

                    if (warRow["Ozone Depletion Potential"].GetType() != typeof(DBNull))
                    {
                        compoundRow["Ozone Impact"] =
                            Convert.ToDouble(warRow["Ozone Depletion Potential"]) / _avgCatScore[4];
                    }

                    if (warRow["Photochemical Oxidation Potential"].GetType() != typeof(DBNull))
                    {
                        compoundRow["Photochemical Oxidation Impact"] =
                            Convert.ToDouble(warRow["Photochemical Oxidation Potential"]) / _avgCatScore[5];
                    }

                    if (warRow["Acidification Potential"].GetType() != typeof(DBNull))
                    {
                        compoundRow["Acidification Impact"] =
                            Convert.ToDouble(warRow["Acidification Potential"]) / _avgCatScore[6];
                    }
                }
            }
        }
    }

    private void CalcCaseImpacts()
    {
        try
        {
            _streams.Rows.Clear();
            _productFlow = 0.0;
            foreach (var pStream in _pInletStreams)
            {
                if (pStream is not ICapeThermoMaterialObjectCOM pTmo) continue;
                var row = _streams.NewRow();
                _streams.Rows.Add(row);
                row["Stream Name"] = pStream.ComponentName;
                row["Type"] = "Inlet";
                var comps = (string[])pTmo.ComponentIds;
                var fraction = (double[])pTmo.GetProp("Fraction", "overall", comps, null, "mass");
                var flow = (double[])pTmo.GetProp("totalFlow", "overall", null, null, "mass");
                row["Total Flow"] = flow[0] * 3600;
                var humanIngest = 0.0;
                var humanDermal = 0.0;
                var aquatic = 0.0;
                var terrestrial = 0.0;
                var global = 0.0;
                var ozone = 0.0;
                var photochemical = 0.0;
                var acidification = 0.0;
                for (var i = 0; i < comps.Length; i++)
                {
                    foreach (DataRow compoundRow in _compounds.Rows)
                    {
                        if (comps[i] != compoundRow["Compound Name"].ToString()) continue;
                        row[comps[i]] = fraction[i];
                        humanIngest = humanIngest + fraction[i] *
                            Convert.ToDouble(compoundRow["Human Ingestion Impact"]);
                        humanDermal = humanDermal +
                                      fraction[i] * Convert.ToDouble(compoundRow["Human Dermal Impact"]);
                        aquatic = aquatic + fraction[i] *
                            Convert.ToDouble(compoundRow["Aquatic Toxicity Impact"]);
                        terrestrial = terrestrial + fraction[i] *
                            Convert.ToDouble(compoundRow["Terrestrial Toxicity Impact"]);
                        global = global + fraction[i] *
                            Convert.ToDouble(compoundRow["Global Warming Impact"]);
                        ozone = ozone + fraction[i] * Convert.ToDouble(compoundRow["Ozone Impact"]);
                        photochemical = photochemical + fraction[i] *
                            Convert.ToDouble(compoundRow["Photochemical Oxidation Impact"]);
                        acidification = acidification +
                                        fraction[i] * Convert.ToDouble(compoundRow["Acidification Impact"]);
                    }
                }

                row["Human Ingestion"] = -1 * flow[0] * 3600 * humanIngest;
                row["Human Dermal"] = -1 * flow[0] * 3600 * humanDermal;
                row["Aquatic Toxicity"] = -1 * flow[0] * 3600 * aquatic;
                row["Terrestrial Toxicity"] = -1 * flow[0] * 3600 * terrestrial;
                row["Global Warming"] = -1 * flow[0] * 3600 * global;
                row["Ozone"] = -1 * flow[0] * 3600 * ozone;
                row["Photochemical Oxidation"] = -1 * flow[0] * 3600 * photochemical;
                row["Acidification"] = -1 * flow[0] * 3600 * acidification;
                var iDot = Convert.ToDouble(numericUpDown1.Value) * Convert.ToDouble(row["Human Ingestion"]);
                iDot = iDot + Convert.ToDouble(numericUpDown2.Value) * Convert.ToDouble(row["Human Dermal"]);
                iDot = iDot + Convert.ToDouble(numericUpDown3.Value) *
                    Convert.ToDouble(row["Aquatic Toxicity"]);
                iDot = iDot + Convert.ToDouble(numericUpDown4.Value) *
                    Convert.ToDouble(row["Terrestrial Toxicity"]);
                iDot = iDot + Convert.ToDouble(numericUpDown5.Value) * Convert.ToDouble(row["Global Warming"]);
                iDot = iDot + Convert.ToDouble(numericUpDown6.Value) * Convert.ToDouble(row["Ozone"]);
                iDot = iDot + Convert.ToDouble(numericUpDown7.Value) *
                    Convert.ToDouble(row["Photochemical Oxidation"]);
                iDot = iDot + Convert.ToDouble(numericUpDown8.Value) * Convert.ToDouble(row["Acidification"]);
                row["I Dot"] = iDot;
            }

            foreach (var pStream in _pOutletStreams)
            {
                if (pStream is not ICapeThermoMaterialObjectCOM pTmo) continue;
                var row = _streams.NewRow();
                _streams.Rows.Add(row);
                var name = pStream.ComponentName;
                row["Stream Name"] = name;
                row["Type"] = "Waste";
                var comps = (string[])pTmo.ComponentIds;
                var fraction = (double[])pTmo.GetProp("Fraction", "overall", comps, null, "mass");
                var flow = (double[])pTmo.GetProp("totalFlow", "overall", null, null, "mass");
                row["Total Flow"] = flow[0] * 3600;
                var humanIngest = 0.0;
                var humanDermal = 0.0;
                var aquatic = 0.0;
                var terrestrial = 0.0;
                var global = 0.0;
                var ozone = 0.0;
                var photochemical = 0.0;
                var acidification = 0.0;
                foreach (var obj in _productStreams)
                {
                    if (name != obj.ToString()) continue;
                    row["Type"] = "Product";
                    _productFlow = _productFlow + flow[0] * 3600;
                }

                for (var i = 0; i < comps.Length; i++)
                {
                    foreach (DataRow compoundRow in _compounds.Rows)
                    {
                        if (comps[i] != compoundRow["Compound Name"].ToString()) continue;
                        row[comps[i]] = fraction[i];
                        humanIngest = humanIngest + fraction[i] *
                            Convert.ToDouble(compoundRow["Human Ingestion Impact"]);
                        humanDermal = humanDermal +
                                      fraction[i] * Convert.ToDouble(compoundRow["Human Dermal Impact"]);
                        aquatic = aquatic + fraction[i] *
                            Convert.ToDouble(compoundRow["Aquatic Toxicity Impact"]);
                        terrestrial = terrestrial + fraction[i] *
                            Convert.ToDouble(compoundRow["Terrestrial Toxicity Impact"]);
                        global = global + fraction[i] *
                            Convert.ToDouble(compoundRow["Global Warming Impact"]);
                        ozone = ozone + fraction[i] * Convert.ToDouble(compoundRow["Ozone Impact"]);
                        photochemical = photochemical + fraction[i] *
                            Convert.ToDouble(compoundRow["Photochemical Oxidation Impact"]);
                        acidification = acidification +
                                        fraction[i] * Convert.ToDouble(compoundRow["Acidification Impact"]);
                    }
                }

                row["Human Ingestion"] = flow[0] * 3600 * humanIngest;
                row["Human Dermal"] = flow[0] * 3600 * humanDermal;
                row["Aquatic Toxicity"] = flow[0] * 3600 * aquatic;
                row["Terrestrial Toxicity"] = flow[0] * 3600 * terrestrial;
                row["Global Warming"] = flow[0] * 3600 * global;
                row["Ozone"] = flow[0] * 3600 * ozone;
                row["Photochemical Oxidation"] = flow[0] * 3600 * photochemical;
                row["Acidification"] = flow[0] * 3600 * acidification;
                var iDot = Convert.ToDouble(numericUpDown1.Value) * Convert.ToDouble(row["Human Ingestion"]);
                iDot = iDot + Convert.ToDouble(numericUpDown2.Value) * Convert.ToDouble(row["Human Dermal"]);
                iDot = iDot + Convert.ToDouble(numericUpDown3.Value) *
                    Convert.ToDouble(row["Aquatic Toxicity"]);
                iDot = iDot + Convert.ToDouble(numericUpDown4.Value) *
                    Convert.ToDouble(row["Terrestrial Toxicity"]);
                iDot = iDot + Convert.ToDouble(numericUpDown5.Value) * Convert.ToDouble(row["Global Warming"]);
                iDot = iDot + Convert.ToDouble(numericUpDown6.Value) * Convert.ToDouble(row["Ozone"]);
                iDot = iDot + Convert.ToDouble(numericUpDown7.Value) *
                    Convert.ToDouble(row["Photochemical Oxidation"]);
                iDot = iDot + Convert.ToDouble(numericUpDown8.Value) * Convert.ToDouble(row["Acidification"]);
                row["I Dot"] = iDot;
            }

            var row1 = _streams.NewRow();
            _streams.Rows.Add(row1);
            row1["Stream Name"] = "Energy";
            row1["Type"] = "Energy";
            row1["Total Flow"] = _energy;
            switch (energyTypeComboBox.Text)
            {
                case "Coal":
                    row1["Type"] = "Coal";
                    row1["Human Ingestion"] = 7.83E-05 * _energy;
                    row1["Human Dermal"] = 1.22E-06 * _energy;
                    row1["Aquatic Toxicity"] = 7.83E-05 * _energy;
                    row1["Terrestrial Toxicity"] = 2.65E-04 * _energy;
                    row1["Global Warming"] = 1.93E-04 * _energy;
                    row1["Ozone"] = 2.03E-09 * _energy;
                    row1["Photochemical Oxidation"] = 7.07E-08 * _energy;
                    row1["Acidification"] = 5.98E-03 * _energy;
                    break;
                case "Natural Gas":
                    row1["Type"] = "Natural Gas";
                    row1["Human Ingestion"] = 4.76E-08 * _energy;
                    row1["Human Dermal"] = 1.30E-07 * _energy;
                    row1["Aquatic Toxicity"] = 4.76E-08 * _energy;
                    row1["Terrestrial Toxicity"] = 1.65E-05 * _energy;
                    row1["Global Warming"] = 9.57E-05 * _energy;
                    row1["Ozone"] = .63E-10 * _energy;
                    row1["Photochemical Oxidation"] = 7.00E-08 * _energy;
                    row1["Acidification"] = 9.92E-04 * _energy;
                    break;
                case "Oil":
                    row1["Type"] = "Oil";
                    row1["Human Ingestion"] = 9.14E-05 * _energy;
                    row1["Human Dermal"] = 7.49E-06 * _energy;
                    row1["Aquatic Toxicity"] = 9.14E-05 * _energy;
                    row1["Terrestrial Toxicity"] = 2.17E-04 * _energy;
                    row1["Global Warming"] = 1.52E-04 * _energy;
                    row1["Ozone"] = 0.00E+00 * _energy;
                    row1["Photochemical Oxidation"] = 3.54E-08 * _energy;
                    row1["Acidification"] = 3.74E-03 * _energy;
                    break;
            }

            var iDot1 = Convert.ToDouble(numericUpDown1.Value) * Convert.ToDouble(row1["Human Ingestion"]);
            iDot1 = iDot1 + Convert.ToDouble(numericUpDown2.Value) * Convert.ToDouble(row1["Human Dermal"]);
            iDot1 = iDot1 + Convert.ToDouble(numericUpDown3.Value) * Convert.ToDouble(row1["Aquatic Toxicity"]);
            iDot1 = iDot1 + Convert.ToDouble(numericUpDown4.Value) * Convert.ToDouble(row1["Terrestrial Toxicity"]);
            iDot1 = iDot1 + Convert.ToDouble(numericUpDown5.Value) * Convert.ToDouble(row1["Global Warming"]);
            iDot1 = iDot1 + Convert.ToDouble(numericUpDown6.Value) * Convert.ToDouble(row1["Ozone"]);
            iDot1 = iDot1 + Convert.ToDouble(numericUpDown7.Value) *
                Convert.ToDouble(row1["Photochemical Oxidation"]);
            iDot1 = iDot1 + Convert.ToDouble(numericUpDown8.Value) * Convert.ToDouble(row1["Acidification"]);
            row1["I Dot"] = iDot1;
            foreach (DataRow row2 in _streams.Rows)
            {
                if (_productFlow > 0.0)
                    row2["I Hat"] = Convert.ToDouble(row2["I Dot"]) / _productFlow;
                else
                    row2["I Hat"] = 0.0;
            }
        }
        catch (Exception pEx)
        {
            MessageBox.Show(pEx.Message);
        }
    }

    private void WriteResultsFile()
    {
        var blob = string.Empty;
        var now = DateTime.Now;
        const string hLine = "-----------------------------------------------------------------------------------------------------------";
        blob = string.Concat(blob, _sheetName, Environment.NewLine);
        blob = string.Concat(blob, _sheetDescription, Environment.NewLine);
        blob = string.Concat(blob, "File created on ", now.ToLongDateString(), " at ", now.ToLongTimeString(),
            Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, hLine, Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, "NOTES", Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, includeProductStreamsCheckBox.Checked ? "Product stream(s) were included in the calculations" : "Product stream(s) were not included in the calculations", Environment.NewLine);
        blob = string.Concat(blob, considerEnergyFlowsCheckBox.Checked ? "Energy usage was included in the calculations" : "Energy usage was not included in the calculations", Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, hLine, Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        // need to code it so that for a certain number of streams its ok then generates
        // another table for more streams
        blob = string.Concat(blob, "STREAM REPORT", Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, CaseStream());
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, hLine, Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, PrintFuelTypes());
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, hLine, Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, "WEIGHTING PROFILE", Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, "Category  HTPI    HTPE    TTP     ATP     GWP     ODP     PCOP    AP",
            Environment.NewLine);
        blob = string.Concat(blob, "Weight    ", numericUpDown1.Value.ToString("F01").PadRight(8));
        blob = string.Concat(blob, numericUpDown2.Value.ToString("F01").PadRight(8));
        blob = string.Concat(blob, numericUpDown3.Value.ToString("F01").PadRight(8));
        blob = string.Concat(blob, numericUpDown4.Value.ToString("F01").PadRight(8));
        blob = string.Concat(blob, numericUpDown5.Value.ToString("F01").PadRight(8));
        blob = string.Concat(blob, numericUpDown6.Value.ToString("F01").PadRight(8));
        blob = string.Concat(blob, numericUpDown7.Value.ToString("F01").PadRight(8));
        blob = string.Concat(blob, numericUpDown8.Value.ToString("F01").PadRight(8));
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, hLine, Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, "ENVIRONMENTAL IMPACT REPORT", Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, "Total PEI Indexes", Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        OverallImpactCalculations();
        blob = string.Concat(blob, GenerateTable());

        // ****************************************************
        // Create table 1
        blob = string.Concat(blob, GenerateTable2());
        blob = string.Concat(blob, Environment.NewLine);

        // **************************************************
        blob = string.Concat(blob, hLine, Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        blob = string.Concat(blob, GenerateChemicalReport());
        blob = string.Concat(blob, hLine, Environment.NewLine);
        blob = string.Concat(blob, Environment.NewLine);
        textBox1.Text = blob;
    }

    private string CaseStream()
    {
        var retVal = Environment.NewLine;
        retVal = string.Concat(retVal, Environment.NewLine);
        const int colWidth1 = 22;
        const int colWidth2 = 13;
        var lastRow = 0;
        while (lastRow < _streams.Rows.Count)
        {
            if (lastRow != 0)
            {
                retVal = string.Concat(retVal, Environment.NewLine);
                retVal = string.Concat(retVal, Environment.NewLine);
                retVal = string.Concat(retVal, "Continued...", Environment.NewLine);
                retVal = string.Concat(retVal, Environment.NewLine);
            }

            var rows = _streams.Rows.Count - lastRow - 1;
            if (rows > 5) rows = 5;
            var lines = new string[_streams.Columns.Count - 10];
            lines[0] = "Name";
            lines[0] = lines[0].PadRight(colWidth1);
            lines[1] = "Type";
            lines[1] = lines[1].PadRight(colWidth1);
            lines[2] = "Flow rate";
            lines[2] = lines[2].PadRight(colWidth1);
            var columns = _streams.Columns.Count;
            for (var j = 13; j < _streams.Columns.Count; j++)
            {
                var temp = _streams.Columns[j].ColumnName;
                lines[j - 10] = temp.PadRight(colWidth1);
            }

            for (var i = lastRow; i < lastRow + rows; i++)
            {
                var streamName = _streams.Rows[i]["Stream Name"].ToString();
                if (streamName.Length > (colWidth2 - 2))
                {
                    var extra = colWidth2 - 3;
                    streamName = streamName.Remove(extra);
                    streamName = string.Concat(streamName, "~");
                }

                lines[0] = string.Concat(lines[0], streamName.PadRight(colWidth2));
                lines[1] = string.Concat(lines[1], _streams.Rows[i]["Type"].ToString().PadRight(colWidth2));
                lines[2] = string.Concat(lines[2],
                    Convert.ToDouble(_streams.Rows[i]["Total Flow"]).ToString("E02").PadRight(colWidth2));
                for (var j = 13; j < _streams.Columns.Count; j++)
                {
                    lines[j - 10] = string.Concat(lines[j - 10],
                        Convert.ToDouble(_streams.Rows[i][_streams.Columns[j].ColumnName]).ToString("F04")
                            .PadRight(colWidth2));
                }
            }

            retVal = lines.Aggregate(retVal, (current, line) => string.Concat(current, line, Environment.NewLine));

            lastRow = lastRow + 5;
        }

        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, Environment.NewLine);
        return retVal;
    }

    private string PrintFuelTypes()
    {
        var retVal = "ENERGY USAGE REPORT";
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, "Energy Usage(MJ/hr)  Fuel Type", Environment.NewLine);
        retVal = string.Concat(retVal, "       ", _energy.ToString("E02"), "      ", energyTypeComboBox.Text,
            Environment.NewLine);
        return retVal;
    }

    void OverallImpactCalculations()
    {
        _iGenTime = 0;
        _iOutTime = 0;
        _iEnergyTime = 0;
        _peiOutTime = new double[8];
        _peiLeaveMass = new double[8];
        _peiGenTime = new double[8];
        _peiGenMass = new double[8];
        _peiEnergyTime = new double[8];
        for (var i = 0; i < 8; i++)
        {
            _peiOutTime[i] = 0;
            _peiLeaveMass[i] = 0;
            _peiGenTime[i] = 0;
            _peiGenMass[i] = 0;
            _peiEnergyTime[i] = 0;
        }

        foreach (DataRow row in _streams.Rows)
        {
            if (row["Type"].ToString() == "Waste")
            {
                _iGenTime = _iGenTime + Convert.ToDouble(row["I Dot"]);
                _iOutTime = _iOutTime + Convert.ToDouble(row["I Dot"]);
                _peiOutTime[0] = _peiOutTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                _peiOutTime[1] = _peiOutTime[1] + Convert.ToDouble(row["Human Dermal"]);
                _peiOutTime[2] = _peiOutTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                _peiOutTime[3] = _peiOutTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                _peiOutTime[4] = _peiOutTime[4] + Convert.ToDouble(row["Global Warming"]);
                _peiOutTime[5] = _peiOutTime[5] + Convert.ToDouble(row["Ozone"]);
                _peiOutTime[6] = _peiOutTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                _peiOutTime[7] = _peiOutTime[7] + Convert.ToDouble(row["Acidification"]);
                _peiGenTime[0] = _peiGenTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                _peiGenTime[1] = _peiGenTime[1] + Convert.ToDouble(row["Human Dermal"]);
                _peiGenTime[2] = _peiGenTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                _peiGenTime[3] = _peiGenTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                _peiGenTime[4] = _peiGenTime[4] + Convert.ToDouble(row["Global Warming"]);
                _peiGenTime[5] = _peiGenTime[5] + Convert.ToDouble(row["Ozone"]);
                _peiGenTime[6] = _peiGenTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                _peiGenTime[7] = _peiGenTime[7] + Convert.ToDouble(row["Acidification"]);
            }

            if (includeProductStreamsCheckBox.Checked && (row["Type"].ToString() == "Product"))
            {
                _iOutTime = _iOutTime + Convert.ToDouble(row["I Dot"]);
                _iGenTime = _iGenTime + Convert.ToDouble(row["I Dot"]);
                _peiOutTime[0] = _peiOutTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                _peiOutTime[1] = _peiOutTime[1] + Convert.ToDouble(row["Human Dermal"]);
                _peiOutTime[2] = _peiOutTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                _peiOutTime[3] = _peiOutTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                _peiOutTime[4] = _peiOutTime[4] + Convert.ToDouble(row["Global Warming"]);
                _peiOutTime[5] = _peiOutTime[5] + Convert.ToDouble(row["Ozone"]);
                _peiOutTime[6] = _peiOutTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                _peiOutTime[7] = _peiOutTime[7] + Convert.ToDouble(row["Acidification"]);
                _peiGenTime[0] = _peiGenTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                _peiGenTime[1] = _peiGenTime[1] + Convert.ToDouble(row["Human Dermal"]);
                _peiGenTime[2] = _peiGenTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                _peiGenTime[3] = _peiGenTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                _peiGenTime[4] = _peiGenTime[4] + Convert.ToDouble(row["Global Warming"]);
                _peiGenTime[5] = _peiGenTime[5] + Convert.ToDouble(row["Ozone"]);
                _peiGenTime[6] = _peiGenTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                _peiGenTime[7] = _peiGenTime[7] + Convert.ToDouble(row["Acidification"]);
            }

            if (row["Type"].ToString() == "Inlet")
            {
                _iGenTime = _iGenTime + Convert.ToDouble(row["I Dot"]);
                _peiGenTime[0] = _peiGenTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                _peiGenTime[1] = _peiGenTime[1] + Convert.ToDouble(row["Human Dermal"]);
                _peiGenTime[2] = _peiGenTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                _peiGenTime[3] = _peiGenTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                _peiGenTime[4] = _peiGenTime[4] + Convert.ToDouble(row["Global Warming"]);
                _peiGenTime[5] = _peiGenTime[5] + Convert.ToDouble(row["Ozone"]);
                _peiGenTime[6] = _peiGenTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                _peiGenTime[7] = _peiGenTime[7] + Convert.ToDouble(row["Acidification"]);
            }

            if (row["Stream Name"].ToString() != "Energy") continue;
            _peiEnergyTime[0] = _peiEnergyTime[0] + Convert.ToDouble(row["Human Ingestion"]);
            _peiEnergyTime[1] = _peiEnergyTime[1] + Convert.ToDouble(row["Human Dermal"]);
            _peiEnergyTime[2] = _peiEnergyTime[2] + Convert.ToDouble(row["Aquatic Toxicity"]);
            _peiEnergyTime[3] = _peiEnergyTime[3] + Convert.ToDouble(row["Terrestrial Toxicity"]);
            _peiEnergyTime[4] = _peiEnergyTime[4] + Convert.ToDouble(row["Global Warming"]);
            _peiEnergyTime[5] = _peiEnergyTime[5] + Convert.ToDouble(row["Ozone"]);
            _peiEnergyTime[6] = _peiEnergyTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
            _peiEnergyTime[7] = _peiEnergyTime[7] + Convert.ToDouble(row["Acidification"]);
            _iEnergyTime = Convert.ToDouble(row["I Dot"]);
            if (!considerEnergyFlowsCheckBox.Checked) continue;
            _iOutTime = _iOutTime + Convert.ToDouble(row["I Dot"]);
            _iGenTime = _iGenTime + Convert.ToDouble(row["I Dot"]);
            _peiOutTime[0] = _peiOutTime[0] + Convert.ToDouble(row["Human Ingestion"]);
            _peiOutTime[1] = _peiOutTime[1] + Convert.ToDouble(row["Human Dermal"]);
            _peiOutTime[2] = _peiOutTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
            _peiOutTime[3] = _peiOutTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
            _peiOutTime[4] = _peiOutTime[4] + Convert.ToDouble(row["Global Warming"]);
            _peiOutTime[5] = _peiOutTime[5] + Convert.ToDouble(row["Ozone"]);
            _peiOutTime[6] = _peiOutTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
            _peiOutTime[7] = _peiOutTime[7] + Convert.ToDouble(row["Acidification"]);
            _peiGenTime[0] = _peiGenTime[0] + Convert.ToDouble(row["Human Ingestion"]);
            _peiGenTime[1] = _peiGenTime[1] + Convert.ToDouble(row["Human Dermal"]);
            _peiGenTime[2] = _peiGenTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
            _peiGenTime[3] = _peiGenTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
            _peiGenTime[4] = _peiGenTime[4] + Convert.ToDouble(row["Global Warming"]);
            _peiGenTime[5] = _peiGenTime[5] + Convert.ToDouble(row["Ozone"]);
            _peiGenTime[6] = _peiGenTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
            _peiGenTime[7] = _peiGenTime[7] + Convert.ToDouble(row["Acidification"]);
        }

        _iGenMass = _iGenTime / _productFlow;
        _iOutMass = _iOutTime / _productFlow;
        _iEnergyMass = _iEnergyTime / _productFlow;
        for (var i = 0; i < 8; i++)
        {
            _peiLeaveMass[i] = _peiOutTime[i] / _productFlow;
            _peiGenMass[i] = _peiGenTime[i] / _productFlow;
        }
    }

    private string GenerateTable()
    {
        var retVal = string.Empty;
        var strHeader = new string[6];
        strHeader[0] = "Iout PEI/hour     ";
        strHeader[1] = "Iout PEI/kg       ";
        strHeader[2] = "Igen PEI/hour     ";
        strHeader[3] = "Igen PEI/kg       ";
        strHeader[4] = "Ienergy PEI/hour  ";
        strHeader[5] = "Ienergy PEI/kg    ";
        retVal = strHeader.Aggregate(retVal, (current, category) => string.Concat(current, category.PadLeft(14)));

        var na = "N/A";
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, _iOutTime.ToString("E03").PadRight(18));
        retVal = string.Concat(retVal, _productFlow != 0.0 ? _iOutMass.ToString("E03").PadRight(18) : na.PadRight(18));
        retVal = string.Concat(retVal, _iGenTime.ToString("E03").PadRight(18));
        retVal = string.Concat(retVal, _productFlow != 0.0 ? _iGenMass.ToString("E03").PadRight(18) : na.PadRight(18));
        retVal = string.Concat(retVal, _iEnergyTime.ToString("E03").PadRight(18));
        retVal = string.Concat(retVal, _productFlow != 0.0 ? _iEnergyMass.ToString("E03").PadRight(18) : na.PadRight(18));
        retVal = string.Concat(retVal, Environment.NewLine);
        return retVal;
    }

    private string GenerateTable2()
    {
        var retVal = string.Empty;
        var strHeader = new string[9];
        strHeader[0] = "HTPI";
        strHeader[1] = "HTPE";
        strHeader[2] = "TTP";
        strHeader[3] = "ATP";
        strHeader[4] = "GWP";
        strHeader[5] = "ODP";
        strHeader[6] = "PCOP";
        strHeader[7] = "AP";
        strHeader[8] = "TOTAL";
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, "Individual impact categories", Environment.NewLine);
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, "Total output rate of PEI (PEI/hour)", Environment.NewLine);
        const string na = "N/A";
        double total = 0;
        retVal = strHeader.Aggregate(retVal, (current, category) => string.Concat(current, category.PadRight(12)));

        retVal = string.Concat(retVal, Environment.NewLine);
        foreach (var value in _peiOutTime)
        {
            retVal = string.Concat(retVal, value.ToString("E02").PadRight(12));
            total = total + value;
        }

        retVal = string.Concat(retVal, total.ToString("E02").PadRight(12));
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, "Total PEI leaving the system per mass of products (PEI/kg product)",
            Environment.NewLine);
        retVal = strHeader.Aggregate(retVal, (current, category) => string.Concat(current, category.PadRight(12)));

        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = _peiOutTime.Aggregate(retVal, (current, value) => string.Concat(current, _productFlow != 0.0 ? (value / _productFlow).ToString("E02").PadRight(12) : na.PadRight(12)));

        retVal = string.Concat(retVal, _productFlow != 0.0 ? (total / _productFlow).ToString("E02").PadRight(12) : na.PadRight(12));
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, "Total generation rate of PEI (PEI/hour)", Environment.NewLine);
        retVal = strHeader.Aggregate(retVal, (current, category) => string.Concat(current, category.PadRight(12)));

        total = 0;
        retVal = string.Concat(retVal, Environment.NewLine);
        foreach (var value in _peiGenTime)
        {
            retVal = string.Concat(retVal, value.ToString("E02").PadRight(12));
            total = total + value;
        }

        retVal = string.Concat(retVal, total.ToString("E02").PadRight(12));
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, "Total PEI generated within a system per mass of products (PEI/kg product)",
            Environment.NewLine);
        retVal = strHeader.Aggregate(retVal, (current, category) => string.Concat(current, category.PadRight(12)));

        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = _peiGenTime.Aggregate(retVal, (current, value) => string.Concat(current, _productFlow != 0.0 ? (value / _productFlow).ToString("E02").PadRight(12) : na.PadRight(12)));

        retVal = string.Concat(retVal, _productFlow != 0.0 ? (total / _productFlow).ToString("E02").PadRight(12) : na.PadRight(12));
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, Environment.NewLine);
        if (!considerEnergyFlowsCheckBox.Checked) return retVal;
        {
            retVal = string.Concat(retVal, "Output rate of PEI from energy usage (PEI/hour)", Environment.NewLine);
            retVal = strHeader.Aggregate(retVal, (current, category) => string.Concat(current, category.PadRight(12)));

            retVal = string.Concat(retVal, Environment.NewLine);
            total = 0;
            foreach (var value in _peiEnergyTime)
            {
                retVal = string.Concat(retVal, value.ToString("E02").PadRight(12));
                total = total + value;
            }

            retVal = string.Concat(retVal, total.ToString("E02").PadRight(12));
            retVal = string.Concat(retVal, Environment.NewLine);
            retVal = string.Concat(retVal, Environment.NewLine);
        }

        return retVal;
    }

    private string GenerateChemicalReport()
    {
        var retVal = string.Empty;
        var strHeader = new string[8];
        strHeader[0] = "HTPI";
        strHeader[1] = "HTPE";
        strHeader[2] = "TTP";
        strHeader[3] = "ATP";
        strHeader[4] = "GWP";
        strHeader[5] = "ODP";
        strHeader[6] = "PCOP";
        strHeader[7] = "AP";
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, "CHEMICAL REPORT", Environment.NewLine);
        retVal = string.Concat(retVal, Environment.NewLine);
        retVal = string.Concat(retVal, "                                                  Normalized impact score",
            Environment.NewLine);
        retVal = string.Concat(retVal, "Chemical    ");
        retVal = strHeader.Aggregate(retVal, (current, category) => string.Concat(current, category.PadRight(12)));

        retVal = string.Concat(retVal, Environment.NewLine);
        foreach (DataRow row in _compounds.Rows)
        {
            retVal = string.Concat(retVal, row["Compound Name"].ToString().PadRight(12));
            retVal = string.Concat(retVal,
                Convert.ToDouble(row["Human Ingestion Impact"]).ToString("E02").PadRight(12));
            retVal = string.Concat(retVal,
                Convert.ToDouble(row["Human Dermal Impact"]).ToString("E02").PadRight(12));
            retVal = string.Concat(retVal,
                Convert.ToDouble(row["Terrestrial Toxicity Impact"]).ToString("E02").PadRight(12));
            retVal = string.Concat(retVal,
                Convert.ToDouble(row["Aquatic Toxicity Impact"]).ToString("E02").PadRight(12));
            retVal = string.Concat(retVal,
                Convert.ToDouble(row["Global Warming Impact"]).ToString("E02").PadRight(12));
            retVal = string.Concat(retVal, Convert.ToDouble(row["Ozone Impact"]).ToString("E02").PadRight(12));
            retVal = string.Concat(retVal,
                Convert.ToDouble(row["Photochemical Oxidation Impact"]).ToString("E02").PadRight(12));
            retVal = string.Concat(retVal,
                Convert.ToDouble(row["Acidification Impact"]).ToString("E02").PadRight(12));
            retVal = string.Concat(retVal, Environment.NewLine);
        }

        retVal = string.Concat(retVal, Environment.NewLine);
        return retVal;
    }


    // The PrintPage event is raised for each page to be printed.
    private void printDocument1_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs ev)
    {
        float linesPerPage = 0;
        var count = 0;
        var leftMargin = (float)ev.MarginBounds.Left;
        var topMargin = (float)ev.MarginBounds.Top;
        string line = null;

        // Calculate the number of lines per page.
        linesPerPage = ev.MarginBounds.Height / _printFont.GetHeight(ev.Graphics);

        // Print each line of the file.
        while (count < linesPerPage && ((line = _streamToPrint.ReadLine()) != null))
        {
            var yPos = topMargin + (count * _printFont.GetHeight(ev.Graphics));
            ev.Graphics.DrawString(line, _printFont, Brushes.Black, leftMargin, yPos, new StringFormat());
            count++;
        }


        // If more lines exist, print another page.
        ev.HasMorePages = line != null;
    }

    private void AvailableUnitOpsheckedListBox_ItemCheck(object sender, ItemCheckEventArgs e)
    {
        try
        {
            if (_starting) return;
            ICapeUnitCOM changedUnit = null;
            feedAndInletStreamListBox.Items.Clear();
            _productStreams.Clear();
            var myEnum = checkedListBox1.CheckedItems.GetEnumerator();
            using var myEnum1 = myEnum as IDisposable;
            while (myEnum.MoveNext())
            {
                _productStreams.Add(myEnum.Current.ToString());
            }

            checkedListBox1.Items.Clear();
            var name = AvailableUnitOpsheckedListBox.Items[e.Index].ToString();
            foreach (var unit in _pUnits)
            {
                if (((ICapeIdentification)unit).ComponentName == name)
                {
                    changedUnit = unit;
                }
            }

            var pUnitPortColl = (ICapeCollection)changedUnit.ports;
            switch (e.NewValue)
            {
                case CheckState.Checked:
                {
                    for (var j = 0; j < pUnitPortColl.Count(); j++)
                    {
                        var pPort = (ICapeUnitPortCOM)pUnitPortColl.Item(j + 1);
                        var pId = (ICapeIdentification)pPort.connectedObject;
                        if (pId == null) continue;
                        ICapeIdentification pOutlet = null;
                        ICapeIdentification pInlet = null;
                        foreach (var stream in _pOutletStreams.Where(stream => stream.ComponentName == pId.ComponentName))
                        {
                            pOutlet = stream;
                        }

                        foreach (var stream in _pInletStreams.Where(stream => stream.ComponentName == pId.ComponentName))
                        {
                            pInlet = stream;
                        }

                        switch (pPort.direction)
                        {
                            case CapePortDirection.CAPE_INLET when pOutlet != null:
                                _pOutletStreams.Remove(pOutlet);
                                break;
                            case CapePortDirection.CAPE_INLET:
                                _pInletStreams.Add(pId);
                                break;
                            case CapePortDirection.CAPE_OUTLET when pInlet != null:
                                _pInletStreams.Remove(pInlet);
                                break;
                            case CapePortDirection.CAPE_OUTLET:
                                _pOutletStreams.Add(pId);
                                break;
                            case CapePortDirection.CAPE_INLET_OUTLET:
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    }

                    break;
                }
                case CheckState.Unchecked:
                {
                    for (var j = 0; j < pUnitPortColl.Count(); j++)
                    {
                        var pPort = (ICapeUnitPortCOM)pUnitPortColl.Item(j + 1);
                        var pId = (ICapeIdentification)pPort.connectedObject;
                        if (pId == null) continue;
                        ICapeIdentification pOutlet = null;
                        ICapeIdentification pInlet = null;
                        foreach (var stream in _pOutletStreams.Where(stream => stream.ComponentName == pId.ComponentName))
                        {
                            pOutlet = stream;
                        }

                        foreach (var stream in _pInletStreams.Where(stream => stream.ComponentName == pId.ComponentName))
                        {
                            pInlet = stream;
                        }

                        switch (pPort.direction)
                        {
                            case CapePortDirection.CAPE_INLET when pInlet != null:
                                _pInletStreams.Remove(pInlet);
                                break;
                            case CapePortDirection.CAPE_INLET:
                                _pOutletStreams.Add(pId);
                                break;
                            case CapePortDirection.CAPE_OUTLET when pOutlet != null:
                                _pOutletStreams.Remove(pOutlet);
                                break;
                            case CapePortDirection.CAPE_OUTLET:
                                _pInletStreams.Add(pId);
                                break;
                        }
                    }

                    break;
                }
                case CheckState.Indeterminate:
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            foreach (var pId1 in _pInletStreams.Where(pId1 => (pId1 is ICapeThermoMaterialObjectCOM) || (pId1 is ICapeThermoMaterialObjectCOM)))
            {
                feedAndInletStreamListBox.Items.Add(pId1.ComponentName);
            }

            foreach (var pId2 in _pOutletStreams.Where(pId2 => (pId2 is ICapeThermoMaterialObjectCOM) || (pId2 is ICapeThermoMaterialObjectCOM)))
            {
                checkedListBox1.Items.Add(pId2.ComponentName, false);
            }

            UpdateStreams();
            WarCalculation();
        }
        catch (Exception pEx)
        {
            MessageBox.Show(pEx.Message);
        }
    }

    private void checkedListBox1_ItemCheck(object sender, ItemCheckEventArgs e)
    {
        if (e.NewValue == CheckState.Checked)
        {
            _productStreams.Add(checkedListBox1.Items[e.Index].ToString());
        }
        else
        {
            _productStreams.Remove(checkedListBox1.Items[e.Index].ToString());
        }

        UpdateStreams();
        WarCalculation();
    }
}