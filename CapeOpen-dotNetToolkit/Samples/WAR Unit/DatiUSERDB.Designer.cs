//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CapeOpenWar {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DatiUSERDB")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DatiUSERDB : System.Data.DataSet {
        
        private ComponentsDataTable tableComponents;
        
        private FactorDataTable tableFactor;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DatiUSERDB() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DatiUSERDB(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Components"] != null)) {
                    base.Tables.Add(new ComponentsDataTable(ds.Tables["Components"]));
                }
                if ((ds.Tables["Factor"] != null)) {
                    base.Tables.Add(new FactorDataTable(ds.Tables["Factor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComponentsDataTable Components {
            get {
                return this.tableComponents;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FactorDataTable Factor {
            get {
                return this.tableFactor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DatiUSERDB cln = ((DatiUSERDB)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Components"] != null)) {
                    base.Tables.Add(new ComponentsDataTable(ds.Tables["Components"]));
                }
                if ((ds.Tables["Factor"] != null)) {
                    base.Tables.Add(new FactorDataTable(ds.Tables["Factor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableComponents = ((ComponentsDataTable)(base.Tables["Components"]));
            if ((initTable == true)) {
                if ((this.tableComponents != null)) {
                    this.tableComponents.InitVars();
                }
            }
            this.tableFactor = ((FactorDataTable)(base.Tables["Factor"]));
            if ((initTable == true)) {
                if ((this.tableFactor != null)) {
                    this.tableFactor.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DatiUSERDB";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatiUSERDB.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableComponents = new ComponentsDataTable();
            base.Tables.Add(this.tableComponents);
            this.tableFactor = new FactorDataTable();
            base.Tables.Add(this.tableFactor);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeComponents() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFactor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DatiUSERDB ds = new DatiUSERDB();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ComponentsRowChangeEventHandler(object sender, ComponentsRowChangeEvent e);
        
        public delegate void FactorRowChangeEventHandler(object sender, FactorRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ComponentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnChemicalName;
            
            private System.Data.DataColumn columnCAS;
            
            private System.Data.DataColumn columnMW;
            
            private System.Data.DataColumn columnFormula;
            
            private System.Data.DataColumn columnlogKowValue;
            
            private System.Data.DataColumn columnlogKowSource;
            
            private System.Data.DataColumn columnLD50RatValue;
            
            private System.Data.DataColumn columnLD50RatNotes;
            
            private System.Data.DataColumn columnLD50RatSource;
            
            private System.Data.DataColumn columnLD50RatScore;
            
            private System.Data.DataColumn columnOSHA_TWA_Value;
            
            private System.Data.DataColumn columnOSHA_TWA_Notes;
            
            private System.Data.DataColumn columnOSHA_TWA_Score;
            
            private System.Data.DataColumn columnFHM_LC50_Value;
            
            private System.Data.DataColumn columnFHM_LC50_Notes;
            
            private System.Data.DataColumn columnFHM_LC50_Source;
            
            private System.Data.DataColumn columnFHM_LC50_Score;
            
            private System.Data.DataColumn columnGWP_Score;
            
            private System.Data.DataColumn columnOD_Value;
            
            private System.Data.DataColumn columnOD_Score;
            
            private System.Data.DataColumn columnPCO_Value;
            
            private System.Data.DataColumn columnPCO_Score;
            
            private System.Data.DataColumn columnAP_Value;
            
            private System.Data.DataColumn columnAP_Score;
            
            private System.Data.DataColumn columnASPENID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComponentsDataTable() {
                this.TableName = "Components";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComponentsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ComponentsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChemicalNameColumn {
                get {
                    return this.columnChemicalName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CASColumn {
                get {
                    return this.columnCAS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MWColumn {
                get {
                    return this.columnMW;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FormulaColumn {
                get {
                    return this.columnFormula;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logKowValueColumn {
                get {
                    return this.columnlogKowValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logKowSourceColumn {
                get {
                    return this.columnlogKowSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LD50RatValueColumn {
                get {
                    return this.columnLD50RatValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LD50RatNotesColumn {
                get {
                    return this.columnLD50RatNotes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LD50RatSourceColumn {
                get {
                    return this.columnLD50RatSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LD50RatScoreColumn {
                get {
                    return this.columnLD50RatScore;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OSHA_TWA_ValueColumn {
                get {
                    return this.columnOSHA_TWA_Value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OSHA_TWA_NotesColumn {
                get {
                    return this.columnOSHA_TWA_Notes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OSHA_TWA_ScoreColumn {
                get {
                    return this.columnOSHA_TWA_Score;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FHM_LC50_ValueColumn {
                get {
                    return this.columnFHM_LC50_Value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FHM_LC50_NotesColumn {
                get {
                    return this.columnFHM_LC50_Notes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FHM_LC50_SourceColumn {
                get {
                    return this.columnFHM_LC50_Source;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FHM_LC50_ScoreColumn {
                get {
                    return this.columnFHM_LC50_Score;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GWP_ScoreColumn {
                get {
                    return this.columnGWP_Score;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OD_ValueColumn {
                get {
                    return this.columnOD_Value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OD_ScoreColumn {
                get {
                    return this.columnOD_Score;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PCO_ValueColumn {
                get {
                    return this.columnPCO_Value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PCO_ScoreColumn {
                get {
                    return this.columnPCO_Score;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AP_ValueColumn {
                get {
                    return this.columnAP_Value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AP_ScoreColumn {
                get {
                    return this.columnAP_Score;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ASPENIDColumn {
                get {
                    return this.columnASPENID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComponentsRow this[int index] {
                get {
                    return ((ComponentsRow)(this.Rows[index]));
                }
            }
            
            public event ComponentsRowChangeEventHandler ComponentsRowChanging;
            
            public event ComponentsRowChangeEventHandler ComponentsRowChanged;
            
            public event ComponentsRowChangeEventHandler ComponentsRowDeleting;
            
            public event ComponentsRowChangeEventHandler ComponentsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddComponentsRow(ComponentsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComponentsRow AddComponentsRow(
                        string ChemicalName, 
                        string CAS, 
                        double MW, 
                        string Formula, 
                        double logKowValue, 
                        string logKowSource, 
                        double LD50RatValue, 
                        string LD50RatNotes, 
                        string LD50RatSource, 
                        double LD50RatScore, 
                        double OSHA_TWA_Value, 
                        string OSHA_TWA_Notes, 
                        double OSHA_TWA_Score, 
                        double FHM_LC50_Value, 
                        string FHM_LC50_Notes, 
                        string FHM_LC50_Source, 
                        double FHM_LC50_Score, 
                        double GWP_Score, 
                        double OD_Value, 
                        double OD_Score, 
                        double PCO_Value, 
                        double PCO_Score, 
                        double AP_Value, 
                        double AP_Score, 
                        string ASPENID) {
                ComponentsRow rowComponentsRow = ((ComponentsRow)(this.NewRow()));
                rowComponentsRow.ItemArray = new object[] {
                        ChemicalName,
                        CAS,
                        MW,
                        Formula,
                        logKowValue,
                        logKowSource,
                        LD50RatValue,
                        LD50RatNotes,
                        LD50RatSource,
                        LD50RatScore,
                        OSHA_TWA_Value,
                        OSHA_TWA_Notes,
                        OSHA_TWA_Score,
                        FHM_LC50_Value,
                        FHM_LC50_Notes,
                        FHM_LC50_Source,
                        FHM_LC50_Score,
                        GWP_Score,
                        OD_Value,
                        OD_Score,
                        PCO_Value,
                        PCO_Score,
                        AP_Value,
                        AP_Score,
                        ASPENID};
                this.Rows.Add(rowComponentsRow);
                return rowComponentsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComponentsRow FindByCAS(string CAS) {
                return ((ComponentsRow)(this.Rows.Find(new object[] {
                            CAS})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ComponentsDataTable cln = ((ComponentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ComponentsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnChemicalName = base.Columns["ChemicalName"];
                this.columnCAS = base.Columns["CAS"];
                this.columnMW = base.Columns["MW"];
                this.columnFormula = base.Columns["Formula"];
                this.columnlogKowValue = base.Columns["logKowValue"];
                this.columnlogKowSource = base.Columns["logKowSource"];
                this.columnLD50RatValue = base.Columns["LD50RatValue"];
                this.columnLD50RatNotes = base.Columns["LD50RatNotes"];
                this.columnLD50RatSource = base.Columns["LD50RatSource"];
                this.columnLD50RatScore = base.Columns["LD50RatScore"];
                this.columnOSHA_TWA_Value = base.Columns["OSHA_TWA_Value"];
                this.columnOSHA_TWA_Notes = base.Columns["OSHA_TWA_Notes"];
                this.columnOSHA_TWA_Score = base.Columns["OSHA_TWA_Score"];
                this.columnFHM_LC50_Value = base.Columns["FHM_LC50_Value"];
                this.columnFHM_LC50_Notes = base.Columns["FHM_LC50_Notes"];
                this.columnFHM_LC50_Source = base.Columns["FHM_LC50_Source"];
                this.columnFHM_LC50_Score = base.Columns["FHM_LC50_Score"];
                this.columnGWP_Score = base.Columns["GWP_Score"];
                this.columnOD_Value = base.Columns["OD_Value"];
                this.columnOD_Score = base.Columns["OD_Score"];
                this.columnPCO_Value = base.Columns["PCO_Value"];
                this.columnPCO_Score = base.Columns["PCO_Score"];
                this.columnAP_Value = base.Columns["AP_Value"];
                this.columnAP_Score = base.Columns["AP_Score"];
                this.columnASPENID = base.Columns["ASPENID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnChemicalName = new System.Data.DataColumn("ChemicalName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnChemicalName);
                this.columnCAS = new System.Data.DataColumn("CAS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAS);
                this.columnMW = new System.Data.DataColumn("MW", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMW);
                this.columnFormula = new System.Data.DataColumn("Formula", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormula);
                this.columnlogKowValue = new System.Data.DataColumn("logKowValue", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogKowValue);
                this.columnlogKowSource = new System.Data.DataColumn("logKowSource", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogKowSource);
                this.columnLD50RatValue = new System.Data.DataColumn("LD50RatValue", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLD50RatValue);
                this.columnLD50RatNotes = new System.Data.DataColumn("LD50RatNotes", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLD50RatNotes);
                this.columnLD50RatSource = new System.Data.DataColumn("LD50RatSource", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLD50RatSource);
                this.columnLD50RatScore = new System.Data.DataColumn("LD50RatScore", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLD50RatScore);
                this.columnOSHA_TWA_Value = new System.Data.DataColumn("OSHA_TWA_Value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSHA_TWA_Value);
                this.columnOSHA_TWA_Notes = new System.Data.DataColumn("OSHA_TWA_Notes", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSHA_TWA_Notes);
                this.columnOSHA_TWA_Score = new System.Data.DataColumn("OSHA_TWA_Score", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOSHA_TWA_Score);
                this.columnFHM_LC50_Value = new System.Data.DataColumn("FHM_LC50_Value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFHM_LC50_Value);
                this.columnFHM_LC50_Notes = new System.Data.DataColumn("FHM_LC50_Notes", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFHM_LC50_Notes);
                this.columnFHM_LC50_Source = new System.Data.DataColumn("FHM_LC50_Source", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFHM_LC50_Source);
                this.columnFHM_LC50_Score = new System.Data.DataColumn("FHM_LC50_Score", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFHM_LC50_Score);
                this.columnGWP_Score = new System.Data.DataColumn("GWP_Score", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGWP_Score);
                this.columnOD_Value = new System.Data.DataColumn("OD_Value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOD_Value);
                this.columnOD_Score = new System.Data.DataColumn("OD_Score", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOD_Score);
                this.columnPCO_Value = new System.Data.DataColumn("PCO_Value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCO_Value);
                this.columnPCO_Score = new System.Data.DataColumn("PCO_Score", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCO_Score);
                this.columnAP_Value = new System.Data.DataColumn("AP_Value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAP_Value);
                this.columnAP_Score = new System.Data.DataColumn("AP_Score", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAP_Score);
                this.columnASPENID = new System.Data.DataColumn("ASPENID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnASPENID);
                this.Constraints.Add(new System.Data.UniqueConstraint("ComponentsKey1", new System.Data.DataColumn[] {
                                this.columnCAS}, true));
                this.columnChemicalName.MaxLength = 255;
                this.columnCAS.AllowDBNull = false;
                this.columnCAS.Unique = true;
                this.columnCAS.MaxLength = 255;
                this.columnFormula.MaxLength = 255;
                this.columnlogKowSource.MaxLength = 255;
                this.columnLD50RatNotes.MaxLength = 255;
                this.columnLD50RatSource.MaxLength = 255;
                this.columnOSHA_TWA_Notes.MaxLength = 255;
                this.columnFHM_LC50_Notes.MaxLength = 255;
                this.columnFHM_LC50_Source.MaxLength = 255;
                this.columnASPENID.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComponentsRow NewComponentsRow() {
                return ((ComponentsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ComponentsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ComponentsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComponentsRowChanged != null)) {
                    this.ComponentsRowChanged(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComponentsRowChanging != null)) {
                    this.ComponentsRowChanging(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComponentsRowDeleted != null)) {
                    this.ComponentsRowDeleted(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComponentsRowDeleting != null)) {
                    this.ComponentsRowDeleting(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveComponentsRow(ComponentsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DatiUSERDB ds = new DatiUSERDB();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ComponentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FactorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FactorDataTable() {
                this.TableName = "Factor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FactorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FactorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FactorRow this[int index] {
                get {
                    return ((FactorRow)(this.Rows[index]));
                }
            }
            
            public event FactorRowChangeEventHandler FactorRowChanging;
            
            public event FactorRowChangeEventHandler FactorRowChanged;
            
            public event FactorRowChangeEventHandler FactorRowDeleting;
            
            public event FactorRowChangeEventHandler FactorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFactorRow(FactorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FactorRow AddFactorRow(string Name, double Value) {
                FactorRow rowFactorRow = ((FactorRow)(this.NewRow()));
                rowFactorRow.ItemArray = new object[] {
                        Name,
                        Value};
                this.Rows.Add(rowFactorRow);
                return rowFactorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FactorRow FindByName(string Name) {
                return ((FactorRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FactorDataTable cln = ((FactorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FactorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnValue = new System.Data.DataColumn("Value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FactorRow NewFactorRow() {
                return ((FactorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FactorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FactorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FactorRowChanged != null)) {
                    this.FactorRowChanged(this, new FactorRowChangeEvent(((FactorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FactorRowChanging != null)) {
                    this.FactorRowChanging(this, new FactorRowChangeEvent(((FactorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FactorRowDeleted != null)) {
                    this.FactorRowDeleted(this, new FactorRowChangeEvent(((FactorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FactorRowDeleting != null)) {
                    this.FactorRowDeleting(this, new FactorRowChangeEvent(((FactorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFactorRow(FactorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DatiUSERDB ds = new DatiUSERDB();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FactorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ComponentsRow : System.Data.DataRow {
            
            private ComponentsDataTable tableComponents;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComponentsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableComponents = ((ComponentsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChemicalName {
                get {
                    try {
                        return ((string)(this[this.tableComponents.ChemicalNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ChemicalName\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.ChemicalNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAS {
                get {
                    return ((string)(this[this.tableComponents.CASColumn]));
                }
                set {
                    this[this.tableComponents.CASColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MW {
                get {
                    try {
                        return ((double)(this[this.tableComponents.MWColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MW\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.MWColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Formula {
                get {
                    try {
                        return ((string)(this[this.tableComponents.FormulaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Formula\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.FormulaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double logKowValue {
                get {
                    try {
                        return ((double)(this[this.tableComponents.logKowValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logKowValue\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.logKowValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string logKowSource {
                get {
                    try {
                        return ((string)(this[this.tableComponents.logKowSourceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logKowSource\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.logKowSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LD50RatValue {
                get {
                    try {
                        return ((double)(this[this.tableComponents.LD50RatValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LD50RatValue\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.LD50RatValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LD50RatNotes {
                get {
                    try {
                        return ((string)(this[this.tableComponents.LD50RatNotesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LD50RatNotes\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.LD50RatNotesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LD50RatSource {
                get {
                    try {
                        return ((string)(this[this.tableComponents.LD50RatSourceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LD50RatSource\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.LD50RatSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LD50RatScore {
                get {
                    try {
                        return ((double)(this[this.tableComponents.LD50RatScoreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LD50RatScore\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.LD50RatScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OSHA_TWA_Value {
                get {
                    try {
                        return ((double)(this[this.tableComponents.OSHA_TWA_ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OSHA_TWA_Value\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.OSHA_TWA_ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OSHA_TWA_Notes {
                get {
                    try {
                        return ((string)(this[this.tableComponents.OSHA_TWA_NotesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OSHA_TWA_Notes\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.OSHA_TWA_NotesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OSHA_TWA_Score {
                get {
                    try {
                        return ((double)(this[this.tableComponents.OSHA_TWA_ScoreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OSHA_TWA_Score\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.OSHA_TWA_ScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FHM_LC50_Value {
                get {
                    try {
                        return ((double)(this[this.tableComponents.FHM_LC50_ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FHM_LC50_Value\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.FHM_LC50_ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FHM_LC50_Notes {
                get {
                    try {
                        return ((string)(this[this.tableComponents.FHM_LC50_NotesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FHM_LC50_Notes\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.FHM_LC50_NotesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FHM_LC50_Source {
                get {
                    try {
                        return ((string)(this[this.tableComponents.FHM_LC50_SourceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FHM_LC50_Source\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.FHM_LC50_SourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FHM_LC50_Score {
                get {
                    try {
                        return ((double)(this[this.tableComponents.FHM_LC50_ScoreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FHM_LC50_Score\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.FHM_LC50_ScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GWP_Score {
                get {
                    try {
                        return ((double)(this[this.tableComponents.GWP_ScoreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GWP_Score\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.GWP_ScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OD_Value {
                get {
                    try {
                        return ((double)(this[this.tableComponents.OD_ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OD_Value\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.OD_ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OD_Score {
                get {
                    try {
                        return ((double)(this[this.tableComponents.OD_ScoreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OD_Score\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.OD_ScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PCO_Value {
                get {
                    try {
                        return ((double)(this[this.tableComponents.PCO_ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PCO_Value\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.PCO_ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PCO_Score {
                get {
                    try {
                        return ((double)(this[this.tableComponents.PCO_ScoreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PCO_Score\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.PCO_ScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AP_Value {
                get {
                    try {
                        return ((double)(this[this.tableComponents.AP_ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AP_Value\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.AP_ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AP_Score {
                get {
                    try {
                        return ((double)(this[this.tableComponents.AP_ScoreColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AP_Score\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.AP_ScoreColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ASPENID {
                get {
                    try {
                        return ((string)(this[this.tableComponents.ASPENIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ASPENID\' in table \'Components\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComponents.ASPENIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChemicalNameNull() {
                return this.IsNull(this.tableComponents.ChemicalNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChemicalNameNull() {
                this[this.tableComponents.ChemicalNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMWNull() {
                return this.IsNull(this.tableComponents.MWColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMWNull() {
                this[this.tableComponents.MWColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormulaNull() {
                return this.IsNull(this.tableComponents.FormulaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormulaNull() {
                this[this.tableComponents.FormulaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogKowValueNull() {
                return this.IsNull(this.tableComponents.logKowValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogKowValueNull() {
                this[this.tableComponents.logKowValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogKowSourceNull() {
                return this.IsNull(this.tableComponents.logKowSourceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogKowSourceNull() {
                this[this.tableComponents.logKowSourceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLD50RatValueNull() {
                return this.IsNull(this.tableComponents.LD50RatValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLD50RatValueNull() {
                this[this.tableComponents.LD50RatValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLD50RatNotesNull() {
                return this.IsNull(this.tableComponents.LD50RatNotesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLD50RatNotesNull() {
                this[this.tableComponents.LD50RatNotesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLD50RatSourceNull() {
                return this.IsNull(this.tableComponents.LD50RatSourceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLD50RatSourceNull() {
                this[this.tableComponents.LD50RatSourceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLD50RatScoreNull() {
                return this.IsNull(this.tableComponents.LD50RatScoreColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLD50RatScoreNull() {
                this[this.tableComponents.LD50RatScoreColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOSHA_TWA_ValueNull() {
                return this.IsNull(this.tableComponents.OSHA_TWA_ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOSHA_TWA_ValueNull() {
                this[this.tableComponents.OSHA_TWA_ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOSHA_TWA_NotesNull() {
                return this.IsNull(this.tableComponents.OSHA_TWA_NotesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOSHA_TWA_NotesNull() {
                this[this.tableComponents.OSHA_TWA_NotesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOSHA_TWA_ScoreNull() {
                return this.IsNull(this.tableComponents.OSHA_TWA_ScoreColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOSHA_TWA_ScoreNull() {
                this[this.tableComponents.OSHA_TWA_ScoreColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFHM_LC50_ValueNull() {
                return this.IsNull(this.tableComponents.FHM_LC50_ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFHM_LC50_ValueNull() {
                this[this.tableComponents.FHM_LC50_ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFHM_LC50_NotesNull() {
                return this.IsNull(this.tableComponents.FHM_LC50_NotesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFHM_LC50_NotesNull() {
                this[this.tableComponents.FHM_LC50_NotesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFHM_LC50_SourceNull() {
                return this.IsNull(this.tableComponents.FHM_LC50_SourceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFHM_LC50_SourceNull() {
                this[this.tableComponents.FHM_LC50_SourceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFHM_LC50_ScoreNull() {
                return this.IsNull(this.tableComponents.FHM_LC50_ScoreColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFHM_LC50_ScoreNull() {
                this[this.tableComponents.FHM_LC50_ScoreColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGWP_ScoreNull() {
                return this.IsNull(this.tableComponents.GWP_ScoreColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGWP_ScoreNull() {
                this[this.tableComponents.GWP_ScoreColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOD_ValueNull() {
                return this.IsNull(this.tableComponents.OD_ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOD_ValueNull() {
                this[this.tableComponents.OD_ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOD_ScoreNull() {
                return this.IsNull(this.tableComponents.OD_ScoreColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOD_ScoreNull() {
                this[this.tableComponents.OD_ScoreColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCO_ValueNull() {
                return this.IsNull(this.tableComponents.PCO_ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCO_ValueNull() {
                this[this.tableComponents.PCO_ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPCO_ScoreNull() {
                return this.IsNull(this.tableComponents.PCO_ScoreColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPCO_ScoreNull() {
                this[this.tableComponents.PCO_ScoreColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAP_ValueNull() {
                return this.IsNull(this.tableComponents.AP_ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAP_ValueNull() {
                this[this.tableComponents.AP_ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAP_ScoreNull() {
                return this.IsNull(this.tableComponents.AP_ScoreColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAP_ScoreNull() {
                this[this.tableComponents.AP_ScoreColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsASPENIDNull() {
                return this.IsNull(this.tableComponents.ASPENIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetASPENIDNull() {
                this[this.tableComponents.ASPENIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FactorRow : System.Data.DataRow {
            
            private FactorDataTable tableFactor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FactorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFactor = ((FactorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableFactor.NameColumn]));
                }
                set {
                    this[this.tableFactor.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Value {
                get {
                    try {
                        return ((double)(this[this.tableFactor.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'Factor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFactor.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableFactor.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableFactor.ValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ComponentsRowChangeEvent : System.EventArgs {
            
            private ComponentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComponentsRowChangeEvent(ComponentsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComponentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FactorRowChangeEvent : System.EventArgs {
            
            private FactorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FactorRowChangeEvent(FactorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FactorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591