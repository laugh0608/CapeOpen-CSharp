//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:2.0.50727.42
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapeOpenReactor {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Mose.CapeOpenToolkit.UnitProxy;
    using System.Runtime.InteropServices;
    
    
    [System.Runtime.InteropServices.GuidAttribute("2495a637-3119-4093-9dd4-23ad2615c4fe")]
    public partial class ReactorUnit {
        
        public ReactorUnit() : 
                base() {
        }
        
        public double K1Value {
            get {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("K1")));
                return zParam.Value;
            }
            set {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("K1")));
                zParam.Value = value;
            }
        }
        
        public double K2Value {
            get {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("K2")));
                return zParam.Value;
            }
            set {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("K2")));
                zParam.Value = value;
            }
        }
        
        public double K3Value {
            get {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("K3")));
                return zParam.Value;
            }
            set {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("K3")));
                zParam.Value = value;
            }
        }
        
        public double E1Value {
            get {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("E1")));
                return zParam.Value;
            }
            set {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("E1")));
                zParam.Value = value;
            }
        }
        
        public double E2Value {
            get {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("E2")));
                return zParam.Value;
            }
            set {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("E2")));
                zParam.Value = value;
            }
        }
        
        public double E3Value {
            get {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("E3")));
                return zParam.Value;
            }
            set {
                Mose.CapeOpenToolkit.UnitProxy.DoubleParameter zParam;
                zParam = ((Mose.CapeOpenToolkit.UnitProxy.DoubleParameter)(Parameters.GetParameterByName("E3")));
                zParam.Value = value;
            }
        }
        
        public Mose.CapeOpenToolkit.UnitProxy.CapeOpenThermoMaterialObject InputPort {
            get {
                Mose.CapeOpenToolkit.UnitProxy.MaterialPort zPort;
                zPort = ((Mose.CapeOpenToolkit.UnitProxy.MaterialPort)(Ports.GetPortByName("InputPort")));
                return ((Mose.CapeOpenToolkit.UnitProxy.CapeOpenThermoMaterialObject)(zPort.ConnectedObject));
            }
        }
        
        public Mose.CapeOpenToolkit.UnitProxy.CapeOpenThermoMaterialObject OutputPort {
            get {
                Mose.CapeOpenToolkit.UnitProxy.MaterialPort zPort;
                zPort = ((Mose.CapeOpenToolkit.UnitProxy.MaterialPort)(Ports.GetPortByName("OutputPort")));
                return ((Mose.CapeOpenToolkit.UnitProxy.CapeOpenThermoMaterialObject)(zPort.ConnectedObject));
            }
        }
        
        protected override void OnInitialize() {
            Name = "ReactorUnit";
            Description = "Reactor Unit .Net";
            Ports.Add(CapeOpenUnitPort.Create(CapeOpenPortType.Material, "InputPort", "Input Port of Reactor", CapeOpenPortDirection.Inlet));
            Ports.Add(CapeOpenUnitPort.Create(CapeOpenPortType.Material, "OutputPort", "Output Port of Reactor", CapeOpenPortDirection.Outlet));
            Parameters.Add(DoubleParameter.Create("K1", "Kinetic Constant for R1", CapeOpenParameterMode.ReadWrite, -1E+35, 1E+35, 159000));
            Parameters.Add(DoubleParameter.Create("K2", "Kinetic Constant for R2", CapeOpenParameterMode.ReadWrite, -1E+35, 1E+35, 883000));
            Parameters.Add(DoubleParameter.Create("K3", "Kinetic Constant for R3", CapeOpenParameterMode.ReadWrite, -1E+35, 1E+35, 181000000));
            Parameters.Add(DoubleParameter.Create("E1", "Energy of R1", CapeOpenParameterMode.ReadWrite, -1E+35, 1E+35, 15000));
            Parameters.Add(DoubleParameter.Create("E2", "Energy of R2", CapeOpenParameterMode.ReadWrite, -1E+35, 1E+35, 20000));
            Parameters.Add(DoubleParameter.Create("E3", "Energy of R3", CapeOpenParameterMode.ReadWrite, -1E+35, 1E+35, 25000));
        }
    }
}
